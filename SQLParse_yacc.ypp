%{
/*
 * Copyright   : (c) 2010 by Open Source Solutions Pty Ltd.  All Rights Reserved
 * Project     : Core Libraries
 * File        : SQLParse_yacc.ypp
 *
 * Author      : Denis Dowling
 * Created     : 1/12/2010
 *
 * Description : Yacc for the SQL Parser
 */
#include "SQLExpression.h"
#include "SQLParse.h"

#define yymaxdepth SimpleSQL_maxdepth
#define yyparse SimpleSQL_parse
#define yylex   SimpleSQL_lex
#define yyerror SimpleSQL_error
#define yylval  SimpleSQL_lval
#define yychar  SimpleSQL_char
#define yydebug SimpleSQL_debug
#define yypact  SimpleSQL_pact
#define yyr1    SimpleSQL_r1
#define yyr2    SimpleSQL_r2
#define yydef   SimpleSQL_def
#define yychk   SimpleSQL_chk
#define yypgo   SimpleSQL_pgo
#define yyact   SimpleSQL_act
#define yyexca  SimpleSQL_exca
#define yyerrflag SimpleSQL_errflag
#define yynerrs SimpleSQL_nerrs
#define yyps    SimpleSQL_ps
#define yypv    SimpleSQL_pv
#define yys     SimpleSQL_s
#define yy_yys  SimpleSQL_yys
#define yystate SimpleSQL_state
#define yytmp   SimpleSQL_tmp
#define yyv     SimpleSQL_v
#define yy_yyv  SimpleSQL_yyv
#define yyval   SimpleSQL_val
#define yylloc  SimpleSQL_lloc
#define yyreds  SimpleSQL_reds
#define yytoks  SimpleSQL_toks
#define yylhs   SimpleSQL_yylhs
#define yylen   SimpleSQL_yylen
#define yydefred SimpleSQL_yydefred
#define yydgoto  SimpleSQL_yydgoto
#define yysindex SimpleSQL_yysindex
#define yyrindex SimpleSQL_yyrindex
#define yygindex SimpleSQL_yygindex
#define yytable  SimpleSQL_yytable
#define yycheck  SimpleSQL_yycheck
#define yyname   SimpleSQL_yyname
#define yyrule   SimpleSQL_yyrule

int SimpleSQL_lex();
void SimpleSQL_error(const char *err);

%}

%union {
    SQLExpression *expression;
    SQLExpressionList *list;
    char *string;
}

%locations

%token <expression>	INT_T REAL_T BOOL_T
%token <string>		STRING_T IDENT_T

%type <expression>	expression
%type <list>		expression_list expressions

%left			OR_T
%left			AND_T
%left			LE_T GE_T '<' '>' EQ_T NE_T
%left			'+' '-'
%left			'/' '*'
%left			NOT_T IN_T BETWEEN_T BETWEEN_AND_T ANY_T LIKE_T
%left			ESCAPE_T IS_T NULL_T
%left			'.'

%start	statement
%%
/***************************************************************/
/*			Expressions					*/
/***************************************************************/

statement       :       expression
                        {
			    SQLParse::current_parser_->setExpression($1);
			}
                |       /* empty */
                        {
			    SQLParse::current_parser_->
				setExpression(0);
			}
                ;

expression	: expression IN_T expression_list
			{
			    $$ = new SQLInExpression($1, $3);
			}
		| expression NOT_T IN_T expression_list
			{
			    $$ = new SQLNotExpression(
			            new SQLInExpression($1, $4));
			}
		| expression BETWEEN_T expression BETWEEN_AND_T expression
			{
			    $$ = new SQLAndExpression(
			            new SQLGreaterEqualsExpression($1, $3),
			            new SQLLessEqualsExpression($1, $5));
			}
		| expression NOT_T BETWEEN_T expression BETWEEN_AND_T expression
			{
			    $$ = new SQLOrExpression(
			            new SQLLessThanExpression($1, $4),
			            new SQLGreaterThanExpression($1, $6));
			}
		| expression EQ_T ANY_T expression_list
			{
			    $$ = new SQLInExpression($1, $4);
			}
		| expression LIKE_T STRING_T
			{
			    $$ = new SQLLikeExpression($1, $3, "");
			    delete [] $3;
			}
		| expression LIKE_T STRING_T ESCAPE_T STRING_T
			{
			    $$ = new SQLLikeExpression($1, $3, $5);
			    delete [] $3;
			    delete [] $5;
			}
		| expression NOT_T LIKE_T STRING_T
			{
			    $$ = new SQLLikeExpression($1, $4, "");
			    delete [] $4;
			}
		| expression NOT_T LIKE_T STRING_T ESCAPE_T STRING_T
			{
			    $$ = new SQLLikeExpression($1, $4, $6);
			    delete [] $4;
			    delete [] $6;
			}
		| expression IS_T NULL_T
			{
			    $$ = new SQLNullExpression($1);
			}
		| expression IS_T NOT_T NULL_T
			{
			    $$ = new SQLNotExpression(
				     new SQLNullExpression($1));
			}
		| expression EQ_T expression
			{
			    $$ = new SQLEqualsExpression($1, $3);
			}
		| expression NE_T expression
			{
			    $$ = new SQLNotEqualsExpression($1, $3);
			}
		| expression '<' expression
			{
			    $$ = new SQLLessThanExpression($1, $3);
			}
		| expression '>' expression
			{
			    $$ = new SQLGreaterThanExpression($1, $3);
			}
		| expression LE_T expression
			{
			    $$ = new SQLLessEqualsExpression($1, $3);
			}
		| expression GE_T expression
                        {
                            $$ = new SQLGreaterEqualsExpression($1, $3);
			}
		| expression AND_T expression
			{
			    $$ = new SQLAndExpression($1, $3);
			}
		| expression OR_T expression
			{
			    $$ = new SQLOrExpression($1, $3);
			}
		| NOT_T expression
			{
			    $$ = new SQLNotExpression($2);
			}
		| expression '+' expression
			{
			    $$ = new SQLOperationExpression($1, $3, '+');
			}
		| expression '-' expression
			{
			    $$ = new SQLOperationExpression($1, $3, '-');
			}
		| expression '*' expression
			{
			    $$ = new SQLOperationExpression($1, $3, '*');
			}
		| expression '/' expression
			{
			    $$ = new SQLOperationExpression($1, $3, '/');
			}
		| '-' expression
		        {
			    $$ = new SQLNegateExpression($2);
			}
		| IDENT_T expression_list
			{
			    $$ = new SQLFunctionExpression("", $1, $2);
			    delete [] $1;
			}
		| IDENT_T '.' IDENT_T expression_list
			{
			    $$ = new SQLFunctionExpression($1, $3, $4);
			    delete [] $1;
			    delete [] $3;
			}
		| '(' expression ')'
			{
			    $$ = $2;
			}
		| IDENT_T
			{
			    $$ = new SQLVariableExpression("", $1);
			    delete [] $1;
			}
		| IDENT_T '.' IDENT_T
			{
			    $$ = new SQLVariableExpression($1, $3);
			    delete [] $1;
			    delete [] $3;
			}
		| STRING_T
			{
			    $$ = new SQLValueExpression(
			             new SQLStringValue($1));
			    delete [] $1;
			}
		| INT_T
			{
			    $$ = $1;
			}
		| REAL_T
			{
			    $$ = $1;
			}
		| BOOL_T
			{
			    $$ = $1;
			}
                | expression error expression
		        {
                            SQLParse::current_parser_->
                                addError("missing operator",
                                         @2.first_line,
                                         @2.first_column);

			    // Through away one argument.
			    $3->getRef();
			    $3->releaseRef();

			    $$ = $1;
                        }
                | expression operator error
		        {
                            SQLParse::current_parser_->
                                addError("missing expression",
                                         @3.first_line,
                                         @3.first_column);
			    $$ = $1;
                        }
                | '(' expression error
		        {
                            SQLParse::current_parser_->addError("missing ')'",
                                                                @3.first_line,
                                                                @3.first_column);
			    $$ = $2;
			}
		;

expression_list : '(' expressions ')'
			{
			    $$ = $2;
			}
		;

expressions	: expressions ',' expression
			{
			    $1->addExpression($3);
			    $$ = $1;
			}
		| expression
			{
			    $$ = new SQLExpressionList;
			    $$->addExpression($1);
			}
		;

operator        : EQ_T
		| NE_T
		| '<'
		| '>'
		| LE_T
		| GE_T
		| AND_T
		| OR_T
                ;

%%

extern int yylex();

void
yyerror(const char *err)
{
    SQLParse::current_parser_->addError(err,
                                        yylloc.first_line,
                                        yylloc.first_column);
}
