%{
/*
 * Copyright   : (c) 2010 by Open Source Solutions Pty Ltd.  All Rights Reserved
 * Project     : Core Libraries
 * File        : SQLParse_lex.lpp
 *
 * Author      : Denis Dowling
 * Created     : 1/12/2010
 *
 * Description : Lexer for the SQL Parser
 */

#define yylval SimpleSQL_lval
#undef YY_DECL
#define YY_DECL int SimpleSQL_lex()

#include "SQLParse.h"
#include "SQLExpression.h"
#include "SQLParse_yacc.hpp"

static bool between_context = false;

#define YY_SKIP_YYWRAP
static int yywrap(void)
{
    return 1;
}

static void unescape_string()
{
    int i;
    yylval.string = new char[yyleng];
    int p = 0;
    // Ignore first and last quote characters
    for (i = 1; i < yyleng-1; i++)
    {
        char c = yytext[i];
        if (c == '\\' && i < yyleng-2)
        {
            i++;
            c = yytext[i];
            if (c == 'n')
                c = '\n';
            else if (c == 'r')
                c = '\r';
            else if (c == 't')
                c = '\t';
            // Other characters just use the backslash to escape them
        }
        yylval.string[p++] = c;
    }
    yylval.string[p++] = '\0';
}

#define YY_USER_ACTION update_lloc();

static void update_lloc()
{
    extern YYLTYPE SimpleSQL_lloc;

    SimpleSQL_lloc.first_line = SimpleSQL_lloc.last_line;
    SimpleSQL_lloc.first_column = SimpleSQL_lloc.last_column;

    int i;
    for(i = 0; yytext[i] != '\0'; i++)
    {
        if (yytext[i] == '\n')
        {
            SimpleSQL_lloc.last_line++;
            SimpleSQL_lloc.last_column = 0;
        }
        else
            SimpleSQL_lloc.last_column++;
    }
}

%}

%option nounput
%option never-interactive
%option yylineno

%%

"and"		{
    // We need to switch the and statement if we are in a between context or
    // not to remove some reduce/reduce errors. Thanks Greg for the idea.
    if (between_context)
    {
	between_context = false;
	return(BETWEEN_AND_T);
    }
    else
	return(AND_T);
}

"between"	{
    between_context = true;
    return(BETWEEN_T);
}

"&&"            return(AND_T);
"or"		return(OR_T);
"||"		return(OR_T);
"not"           return(NOT_T);
"!"             return(NOT_T);
"<="		return(LE_T);
">="		return(GE_T);
"="		return(EQ_T);
"=="		return(EQ_T);
"!="		return(NE_T);
"any"		return(ANY_T);

"escape"	return(ESCAPE_T);
"like"		return(LIKE_T);
"in"            return(IN_T);
"is"            return(IS_T);
"null"		return(NULL_T);

-?[0-9]+	{
    yylval.expression =
	new SQLValueExpression(new SQLIntegerValue(atoi((char *)yytext)));
    return(INT_T);
}

-?[0-9]+\.[0-9]* {
    yylval.expression =
	new SQLValueExpression(new SQLRealValue(atof((char *)yytext)));
    return(REAL_T);
}

[0-9]+\.[0-9]+\.[0-9]+\.[0-9]+ {
    yylval.expression =
        new SQLValueExpression(new SQLIPAddressValue(yytext));
    return(IP_ADDRESS_T);
}

"true"		{
    yylval.expression =
	new SQLValueExpression(new SQLBooleanValue(1));
    return(BOOL_T);
}

"false"		{
    yylval.expression =	new SQLValueExpression(new SQLBooleanValue(0));
    return(BOOL_T);
}

\'[^']*\' {
    // Can put ' in string by prefixing with \ ie \'.
    // FIXME Does not handle double backslash at end of line
    if (yyleng >= 2 && yytext[yyleng-2] == '\\')
    {
         yyless(yyleng-1); // Return last quote
	 yymore(); // Append next string to this token
    }
    else
    {
        unescape_string();
	return(STRING_T);
    }
}

\"[^"]*\" {
    // Also support double quoted strings
    if (yyleng >= 2 && yytext[yyleng-2] == '\\')
    {
         yyless(yyleng-1); // Return last quote
	 yymore(); // Append next string to this token
    }
    else
    {
        unescape_string();
	return(STRING_T);
    }
}

[A-Za-z_][A-Za-z_0-9-]*	{
    yylval.string = new char[yyleng + 1];
    strcpy(yylval.string, (char *)yytext);
    return(IDENT_T);
}

[ \t\n]+		/* Skip whitespace */	;

.		{ 	/* unmatched character */
    return yytext[0];
}

%%
